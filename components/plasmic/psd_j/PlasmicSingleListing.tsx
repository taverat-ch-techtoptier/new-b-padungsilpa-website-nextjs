// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: EQwRxbdl2id8

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: fMrxAl7coXSG/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import YouTube from "@plasmicpkgs/react-youtube";
import ContactSectionFooterTop from "../../ContactSectionFooterTop"; // plasmic-import: 4arliTQcAY3d/component
import Footer2 from "../../Footer2"; // plasmic-import: 9pDOvBRTOpt9/component

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicSingleListing.module.css"; // plasmic-import: EQwRxbdl2id8/css

import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: HZOtD1fAEgQN/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: YDVzHW_YDla2/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8DjHUJI81s9x/icon

createPlasmicElementProxy;

export type PlasmicSingleListing__VariantMembers = {};
export type PlasmicSingleListing__VariantsArgs = {};
type VariantPropType = keyof PlasmicSingleListing__VariantsArgs;
export const PlasmicSingleListing__VariantProps = new Array<VariantPropType>();

export type PlasmicSingleListing__ArgsType = {};
type ArgPropType = keyof PlasmicSingleListing__ArgsType;
export const PlasmicSingleListing__ArgProps = new Array<ArgPropType>();

export type PlasmicSingleListing__OverridesType = {
  page?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  bannerHeader?: Flex__<"div">;
  h1?: Flex__<"h1">;
  foreground?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  httpsYoutuBeHTzu3ZmGk80?: Flex__<typeof YouTube>;
  contactSectionFooterTop?: Flex__<typeof ContactSectionFooterTop>;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultSingleListingProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSingleListing__RenderFunc(props: {
  variants: PlasmicSingleListing__VariantsArgs;
  args: PlasmicSingleListing__ArgsType;
  overrides: PlasmicSingleListing__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"page"}
          data-plasmic-override={overrides.page}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.page
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"bannerHeader"}
            data-plasmic-override={overrides.bannerHeader}
            className={classNames(projectcss.all, sty.bannerHeader)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__cSZeq)}>
              <div className={classNames(projectcss.all, sty.freeBox__ntZph)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xeN7N)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "PERMATANK \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                      : "PERMATANK \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"}
                  </h1>
                </Stack__>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7IOn)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___11Yo)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"foreground"}
                data-plasmic-override={overrides.foreground}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__bepyr)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__dkghG)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gj1Z1)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__tL5W
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14"
                          : "\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14"}
                      </h2>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Dlcu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bd3V9
                          )}
                        >
                          {
                            "\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e41\u0e1a\u0e1a\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19\u0e02\u0e2d\u0e07 Padungsilpa Engineering Co.,Ltd. \u0e43\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e1c\u0e25\u0e34\u0e15\u0e20\u0e31\u0e13\u0e11\u0e4c \u201cPERMATANK\u201d \u0e42\u0e14\u0e22\u0e44\u0e14\u0e49\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e1c\u0e25\u0e34\u0e15\u0e15\u0e32\u0e21\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\u0e02\u0e2d\u0e07 UL 58& UL1746 \u0e14\u0e49\u0e27\u0e22\u0e27\u0e34\u0e18\u0e35\u0e01\u0e32\u0e23\u0e2d\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e41\u0e25\u0e30\u0e01\u0e32\u0e23\u0e1c\u0e25\u0e34\u0e15\u0e42\u0e14\u0e22\u0e2a\u0e16\u0e32\u0e1a\u0e31\u0e19 STEEL TANK INSTITUTE TECHNOLOGY ,USA"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qK8Fg
                          )}
                        >
                          {
                            "\u0e40\u0e23\u0e32\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e1a\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e48\u0e2d\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e20\u0e32\u0e22\u0e43\u0e15\u0e49\u0e19\u0e42\u0e22\u0e1a\u0e32\u0e22\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32 \u201d \u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07 \u0e16\u0e39\u0e01\u0e15\u0e31\u0e07\u0e04\u0e4c \u0e17\u0e31\u0e19\u0e40\u0e27\u0e25\u0e32 \u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22\u201d \u0e41\u0e25\u0e30\u0e40\u0e19\u0e49\u0e19\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e1c\u0e39\u0e49\u0e23\u0e31\u0e1a\u0e40\u0e2b\u0e21\u0e32 \u0e41\u0e25\u0e30 \u0e1c\u0e39\u0e49\u0e04\u0e49\u0e32\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gFmKt
                          )}
                        >
                          {
                            "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e41\u0e19\u0e48\u0e43\u0e08\u0e27\u0e48\u0e32 \u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e \u0e21\u0e35\u0e2d\u0e32\u0e22\u0e38\u0e43\u0e0a\u0e49\u0e07\u0e32\u0e19\u0e22\u0e32\u0e27\u0e19\u0e32\u0e19\u0e16\u0e36\u0e07\u0e01\u0e27\u0e48\u0e32 30 \u0e1b\u0e35 \u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e08\u0e36\u0e07\u0e43\u0e2a\u0e48\u0e43\u0e08\u0e43\u0e19\u0e17\u0e38\u0e01\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 \u0e41\u0e25\u0e30\u0e08\u0e31\u0e14\u0e2a\u0e48\u0e07\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19 PERMATANK\u00ae"
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__uTxI2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5Eqn9
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__g1Lk7
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yVmn6
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xKZe
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___3CmHj
                              )}
                              role={"img"}
                            />
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : false
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tStss
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gtO4C
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vZsP0
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__awovm
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sszul
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zEmEh
                                )}
                              >
                                {
                                  "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___6EZe
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7XYhM
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__apyDf
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fuBqD
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__k2Hjo
                              )}
                              role={"img"}
                            />
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__izpKi
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__u7T2L
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c0Mg
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__gVGwQ
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__drc3Z
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__kbq3W
                                )}
                              >
                                {
                                  "PERMATANK\u00ae \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__oQzSg
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pprUa
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kL2Aj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ecgnT
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uCuxt
                              )}
                              role={"img"}
                            />
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zGp7K
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___7R0Vx
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5Xrrt
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__g8Gyh
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__iElWh
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__j9IvN
                                )}
                              >
                                {
                                  "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__v641C
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dunbr
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qha7I
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zQzaO
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gbu53
                              )}
                              role={"img"}
                            />
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__em526
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gSgZi
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cit45
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__i0C0L
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__hjmzh
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qBIi
                                )}
                              >
                                {
                                  "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fNRa2
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cYiV
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xGUfA
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kt6Py
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2OqLb
                              )}
                              role={"img"}
                            />
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__amc9H
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xdKlv
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pe4Kx
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__uJgkj
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__g97G6
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__rUdO0
                                )}
                              >
                                {
                                  "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__qf87V
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1YFiv
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__u0EeG
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___399V5
                            )}
                          >
                            <ArrowRightIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zUs9
                              )}
                              role={"img"}
                            />
                          </div>
                          {false ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vIiey
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pjv5W
                                )}
                                role={"img"}
                              />
                            </div>
                          ) : null}
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__eeQ4W
                            )}
                          >
                            <Stack__
                              as={PlasmicLink__}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__clHgR
                              )}
                              component={Link}
                              href={`/`}
                              platform={"nextjs"}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__usgRp
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sCr7
                                )}
                              >
                                {
                                  "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                                }
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__yobIq
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gkE6)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v3UtU)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__he4Sd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__g2ND
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5OjgR
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__u9Mb0
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7Up9
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lbAjy
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__qaUed
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kuWnt
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dwIht
                              )}
                            >
                              {
                                "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__t6Ug
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pqqJc)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x04Hy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4OckX
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__aPiip
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gI8Zw
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t0OH
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ntNiB
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__gDt2
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yMdxG
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gq5S8
                              )}
                            >
                              {
                                "PERMATANK\u00ae \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Qkja
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dOXnv)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__svmzj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___59Y51
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__g0Ykv
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s7Qec
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__u0J64
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gjoDf
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__nKhvV
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1N5L
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2T6R1
                              )}
                            >
                              {
                                "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vauxs
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__klLS)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uX0Nl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qftvq
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mLoOc
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wrqvb
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pZ8KC
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__asHm3
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__eLpPz
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Tvr
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9TSe4
                              )}
                            >
                              {
                                "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oowEg
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6VCr8
                      )}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__skWuh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zcoW
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__f846U
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mpw3N
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bT0E8
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k4YAm
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__vLuoQ
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__pLlb0
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5QRjJ
                              )}
                            >
                              {
                                "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uRMvT
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vJ07H)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bg7Gb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iz1WC
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ju6M
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cJ67N
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kjWxH
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zkax7
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__teaGc
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__t4Jx8
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xaD1M
                              )}
                            >
                              {
                                "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__owrxh
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xfdeY)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xRozz)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__kqY0Y)}
              >
                <div className={classNames(projectcss.all, sty.column__lgcNu)}>
                  {(() => {
                    const child$Props = {
                      arrows: true,
                      autoplay: true,
                      beforeChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "currentSlide",
                          ["sliderCarousel", "currentSlide"],
                          SliderWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      centerMode: false,
                      className: classNames(
                        "__wab_instance",
                        sty.sliderCarousel
                      ),
                      dots: true,
                      draggable: true,
                      initialSlide: generateStateValueProp($state, [
                        "sliderCarousel",
                        "currentSlide"
                      ]),
                      ref: ref => {
                        $refs["sliderCarousel"] = ref;
                      },
                      rows: 1,
                      rtl: false,
                      sliderScopeClassName: sty["sliderCarousel__slider"],
                      slidesPerRow: 1,
                      slidesToScroll: 1,
                      slidesToShow: 1,
                      speed: 1000,
                      swipe: true,
                      swipeToSlide: true,
                      touchMove: true,
                      useCSS: false,
                      useTransform: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "currentSlide",
                          plasmicStateName: "sliderCarousel.currentSlide"
                        }
                      ],
                      [],
                      SliderWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <SliderWrapper
                        data-plasmic-name={"sliderCarousel"}
                        data-plasmic-override={overrides.sliderCarousel}
                        {...child$Props}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___7Ukkc)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: "/plasmic/psd_j/images/pdsPro0118Jpg.jpg",
                            fullWidth: 1479,
                            fullHeight: 1109,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c38Tv)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/psd_j/images/_17ConPds311024X1024Jpg.jpg",
                            fullWidth: 1024,
                            fullHeight: 1024,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__zvCPn)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/psd_j/images/fb24090907Jpg.jpg",
                            fullWidth: 1477,
                            fullHeight: 1108,
                            aspectRatio: undefined
                          }}
                        />
                      </SliderWrapper>
                    );
                  })()}
                </div>
                <div className={classNames(projectcss.all, sty.column__xn1QE)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dYwZg)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__ys7W
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e1a\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\r\n\u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46\r\n\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e48\u0e2d\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07 \u00a0"
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\r\u00a0\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32"
                            }
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e1a\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\r\n\u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46\r\n\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e48\u0e2d\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07 "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\r"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32"
                            }
                          </span>
                        </React.Fragment>
                      )}
                    </h2>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Wr1R
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9ChU
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49\u0e19\u0e42\u0e22\u0e1a\u0e32\u0e22\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32 "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {
                              "\u201d\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07 \u0e16\u0e39\u0e01\u0e15\u0e31\u0e07\u0e04\u0e4c \u0e17\u0e31\u0e19\u0e40\u0e27\u0e25\u0e32 \u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22\u201d"
                            }
                          </span>
                          <React.Fragment>
                            {
                              " \u0e41\u0e25\u0e30\u0e40\u0e19\u0e49\u0e19\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e1c\u0e39\u0e49\u0e23\u0e31\u0e1a\u0e40\u0e2b\u0e21\u0e32\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e04\u0e49\u0e32\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </Stack__>
          <YouTube
            data-plasmic-name={"httpsYoutuBeHTzu3ZmGk80"}
            data-plasmic-override={overrides.httpsYoutuBeHTzu3ZmGk80}
            cc_load_policy={false}
            className={classNames(
              "__wab_instance",
              sty.httpsYoutuBeHTzu3ZmGk80
            )}
            videoId={"HTzu3zmGk80"}
          />

          <ContactSectionFooterTop
            data-plasmic-name={"contactSectionFooterTop"}
            data-plasmic-override={overrides.contactSectionFooterTop}
            className={classNames(
              "__wab_instance",
              sty.contactSectionFooterTop
            )}
          />

          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: [
    "page",
    "header",
    "bannerHeader",
    "h1",
    "foreground",
    "sliderCarousel",
    "httpsYoutuBeHTzu3ZmGk80",
    "contactSectionFooterTop",
    "footer2"
  ],
  header: ["header"],
  bannerHeader: ["bannerHeader", "h1"],
  h1: ["h1"],
  foreground: ["foreground"],
  sliderCarousel: ["sliderCarousel"],
  httpsYoutuBeHTzu3ZmGk80: ["httpsYoutuBeHTzu3ZmGk80"],
  contactSectionFooterTop: ["contactSectionFooterTop"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "div";
  header: typeof Header;
  bannerHeader: "div";
  h1: "h1";
  foreground: "div";
  sliderCarousel: typeof SliderWrapper;
  httpsYoutuBeHTzu3ZmGk80: typeof YouTube;
  contactSectionFooterTop: typeof ContactSectionFooterTop;
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSingleListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSingleListing__VariantsArgs;
    args?: PlasmicSingleListing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSingleListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSingleListing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSingleListing__ArgProps,
          internalVariantPropNames: PlasmicSingleListing__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSingleListing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicSingleListing";
  } else {
    func.displayName = `PlasmicSingleListing.${nodeName}`;
  }
  return func;
}

export const PlasmicSingleListing = Object.assign(
  // Top-level PlasmicSingleListing renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    bannerHeader: makeNodeComponent("bannerHeader"),
    h1: makeNodeComponent("h1"),
    foreground: makeNodeComponent("foreground"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    httpsYoutuBeHTzu3ZmGk80: makeNodeComponent("httpsYoutuBeHTzu3ZmGk80"),
    contactSectionFooterTop: makeNodeComponent("contactSectionFooterTop"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicSingleListing
    internalVariantProps: PlasmicSingleListing__VariantProps,
    internalArgProps: PlasmicSingleListing__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSingleListing;
/* prettier-ignore-end */
