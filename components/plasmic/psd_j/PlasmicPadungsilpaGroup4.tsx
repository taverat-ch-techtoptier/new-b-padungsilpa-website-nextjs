// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: H2AlV6e6QAfN

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header3 from "../../Header3"; // plasmic-import: Fs6IO6-MbSpr/component
import Footer2 from "../../Footer2"; // plasmic-import: 9pDOvBRTOpt9/component

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicPadungsilpaGroup4.module.css"; // plasmic-import: H2AlV6e6QAfN/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8DjHUJI81s9x/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: HZOtD1fAEgQN/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: YDVzHW_YDla2/icon

createPlasmicElementProxy;

export type PlasmicPadungsilpaGroup4__VariantMembers = {};
export type PlasmicPadungsilpaGroup4__VariantsArgs = {};
type VariantPropType = keyof PlasmicPadungsilpaGroup4__VariantsArgs;
export const PlasmicPadungsilpaGroup4__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPadungsilpaGroup4__ArgsType = {};
type ArgPropType = keyof PlasmicPadungsilpaGroup4__ArgsType;
export const PlasmicPadungsilpaGroup4__ArgProps = new Array<ArgPropType>();

export type PlasmicPadungsilpaGroup4__OverridesType = {
  page?: Flex__<"div">;
  header3?: Flex__<typeof Header3>;
  bannerHeader?: Flex__<"div">;
  h1?: Flex__<"h1">;
  subHeader2?: Flex__<"div">;
  aboutUs?: Flex__<"div">;
  foreground?: Flex__<"div">;
  aboutUs2?: Flex__<"div">;
  foreground2?: Flex__<"div">;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultPadungsilpaGroup4Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPadungsilpaGroup4__RenderFunc(props: {
  variants: PlasmicPadungsilpaGroup4__VariantsArgs;
  args: PlasmicPadungsilpaGroup4__ArgsType;
  overrides: PlasmicPadungsilpaGroup4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"page"}
          data-plasmic-override={overrides.page}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.page
          )}
        >
          <Header3
            data-plasmic-name={"header3"}
            data-plasmic-override={overrides.header3}
            className={classNames("__wab_instance", sty.header3)}
          />

          <div
            data-plasmic-name={"bannerHeader"}
            data-plasmic-override={overrides.bannerHeader}
            className={classNames(projectcss.all, sty.bannerHeader)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tZeZ)}>
              <div className={classNames(projectcss.all, sty.freeBox__yvgH)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ndCfL)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c"
                      : "\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c"}
                  </h1>
                </Stack__>
              </div>
            </div>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"subHeader2"}
            data-plasmic-override={overrides.subHeader2}
            hasGap={true}
            className={classNames(projectcss.all, sty.subHeader2)}
          >
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__mnkxi
              )}
              component={Link}
              href={`/History`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__gUptM)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sHqXa
                )}
              >
                {
                  "\u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e04\u0e27\u0e32\u0e21\u0e40\u0e1b\u0e47\u0e19\u0e21\u0e32"
                }
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___8Iwiu)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__xMiPw
              )}
              component={Link}
              href={`/Management Team`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___0ZFxw)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xIyfF
                )}
              >
                {
                  "\u0e04\u0e13\u0e30\u0e1c\u0e39\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23"
                }
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__ubzo8)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__vwTtt
              )}
              component={Link}
              href={`/Message from the Management`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__q4RhE)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9ZrCv
                )}
              >
                {
                  "\u0e2a\u0e32\u0e2a\u0e4c\u0e19\u0e08\u0e32\u0e01\u0e1c\u0e39\u0e49\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23"
                }
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___7SPod)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__aa89F
              )}
              component={Link}
              href={`/Mission Statement and Commitment`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__gcaDq)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bmzKy
                )}
              >
                {
                  "\u0e1e\u0e31\u0e19\u0e18\u0e01\u0e34\u0e08 \u0e41\u0e25\u0e30\u0e04\u0e33\u0e21\u0e31\u0e48\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32"
                }
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___6YiEi)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__lFqzY
              )}
              component={Link}
              href={`/Automatic Tank Gauge System`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__aNpjY)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2972
                )}
              >
                {
                  "\u0e19\u0e42\u0e22\u0e1a\u0e32\u0e22\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e\u0e41\u0e25\u0e30\u0e04\u0e27\u0e32\u0e21\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22"
                }
              </div>
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg__jgNq4)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <Stack__
                as={PlasmicLink__}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___3Qr09
                )}
                component={Link}
                href={`/Fuel Service Construction`}
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg___4L15N)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dhe4J
                  )}
                >
                  {
                    "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e04\u0e23\u0e1a\u0e27\u0e07\u0e08\u0e23"
                  }
                </div>
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__lf2TU)}
                    role={"img"}
                  />
                ) : null}
              </Stack__>
            ) : null}
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"aboutUs"}
            data-plasmic-override={overrides.aboutUs}
            hasGap={true}
            className={classNames(projectcss.all, sty.aboutUs)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3Zbvl)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"foreground"}
                data-plasmic-override={overrides.foreground}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__wJfrz)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__pytjb)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___6LKw)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__svk8P
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0e1e\u0e31\u0e19\u0e18\u0e01\u0e34\u0e08 \u0e41\u0e25\u0e30\u0e04\u0e33\u0e21\u0e31\u0e48\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32"
                          : "\u0e1e\u0e31\u0e19\u0e18\u0e01\u0e34\u0e08 \u0e41\u0e25\u0e30\u0e04\u0e33\u0e21\u0e31\u0e48\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32"}
                      </h2>
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__eHPn4
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? '"\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e40\u0e2b\u0e19\u0e37\u0e2d\u0e23\u0e30\u0e14\u0e31\u0e1a \u0e0b\u0e37\u0e48\u0e2d\u0e2a\u0e31\u0e15\u0e22\u0e4c \u0e08\u0e23\u0e34\u0e07\u0e43\u0e08 \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48\u0e43\u0e08\u0e2a\u0e34\u0e48\u0e07\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21"'
                          : '"\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e40\u0e2b\u0e19\u0e37\u0e2d\u0e23\u0e30\u0e14\u0e31\u0e1a \u0e0b\u0e37\u0e48\u0e2d\u0e2a\u0e31\u0e15\u0e22\u0e4c \u0e08\u0e23\u0e34\u0e07\u0e43\u0e08 \u0e41\u0e25\u0e30\u0e43\u0e2a\u0e48\u0e43\u0e08\u0e2a\u0e34\u0e48\u0e07\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21"'}
                      </h2>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sOXkY
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__onVo
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                fontWeight: 700,
                                textDecorationLine: "underline",
                                color: "var(--token-FC-eCcS5kWsT)"
                              }}
                            >
                              {
                                "\u0e1e\u0e31\u0e19\u0e18\u0e01\u0e34\u0e08\u0e2b\u0e25\u0e31\u0e01"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hy4Dl
                          )}
                        >
                          {
                            "\u0e40\u0e23\u0e32\u0e21\u0e38\u0e48\u0e07\u0e21\u0e31\u0e48\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e21\u0e2d\u0e1a \u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e04\u0e27\u0e32\u0e21\u0e0a\u0e33\u0e19\u0e32\u0e0d\u0e07\u0e32\u0e19 \u0e41\u0e25\u0e30\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e \u0e14\u0e49\u0e27\u0e22\u0e04\u0e27\u0e32\u0e21\u0e0b\u0e37\u0e48\u0e2d\u0e2a\u0e31\u0e15\u0e22\u0e4c\u0e08\u0e23\u0e34\u0e07\u0e43\u0e08 \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e31\u0e19\u0e40\u0e2d\u0e07 \u0e15\u0e23\u0e07\u0e40\u0e27\u0e25\u0e32 \u0e41\u0e25\u0e30 \u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e21\u0e37\u0e2d\u0e2d\u0e32\u0e0a\u0e35\u0e1e"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8RDcz
                          )}
                        >
                          {
                            "\u0e40\u0e23\u0e32\u0e21\u0e38\u0e48\u0e07\u0e40\u0e19\u0e49\u0e19\u0e17\u0e35\u0e48 \u0e08\u0e30\u0e19\u0e33\u0e40\u0e2a\u0e19\u0e2d\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 \u0e07\u0e32\u0e19\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23 \u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32 \u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e43\u0e19\u0e23\u0e32\u0e04\u0e32\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e18\u0e23\u0e23\u0e21\u0e41\u0e25\u0e30\u0e41\u0e02\u0e48\u0e07\u0e02\u0e31\u0e19\u0e44\u0e14\u0e49 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1a\u0e23\u0e23\u0e25\u0e38\u0e1c\u0e25\u0e01\u0e33\u0e44\u0e23\u0e17\u0e35\u0e48\u0e2a\u0e21\u0e40\u0e2b\u0e15\u0e38\u0e2a\u0e21\u0e1c\u0e25 \u0e17\u0e31\u0e49\u0e07\u0e15\u0e48\u0e2d\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e40\u0e2d\u0e07"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tZId5
                          )}
                        >
                          {
                            "\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e2b\u0e49\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e33\u0e04\u0e31\u0e0d \u0e41\u0e25\u0e30\u0e16\u0e37\u0e2d\u0e40\u0e1b\u0e47\u0e19\u0e1e\u0e31\u0e19\u0e18\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e08\u0e30\u0e1b\u0e01\u0e1b\u0e49\u0e2d\u0e07\u0e23\u0e31\u0e01\u0e29\u0e32\u0e2a\u0e38\u0e02\u0e20\u0e32\u0e1e\u0e41\u0e25\u0e30\u0e04\u0e27\u0e32\u0e21\u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22 \u0e02\u0e2d\u0e07\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19 \u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e41\u0e25\u0e30 \u0e1c\u0e39\u0e49\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e18\u0e38\u0e23\u0e01\u0e34\u0e08 \u0e15\u0e25\u0e2d\u0e14\u0e08\u0e19\u0e23\u0e31\u0e1a\u0e1c\u0e34\u0e14\u0e0a\u0e2d\u0e1a\u0e15\u0e48\u0e2d\u0e01\u0e32\u0e23\u0e1e\u0e34\u0e17\u0e31\u0e01\u0e29\u0e4c\u0e23\u0e31\u0e01\u0e29\u0e32\u0e2a\u0e20\u0e32\u0e1e\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21\u0e02\u0e2d\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e23\u0e27\u0e21"
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qs6Kg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xkGdm)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qj3VW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9K2Px
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5XNav
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tt24Z
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__bpbRq
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ljFeC
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__tqmcA
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___9Af1X
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pTrF9
                              )}
                            >
                              {
                                "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__c018U
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ii8T9)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xpLv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lTqzM
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mx53
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uOl6V
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hVVwy
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zmkXv
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__eRt4W
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jxF6
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Uhxp
                              )}
                            >
                              {
                                "PERMATANK\u00ae \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xlCsp
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__leAXb)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__x9Z6
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ihwMo
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kMelv
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__oq1SW
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0SScx
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ezvHz
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__oCmJq
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__t4Cwj
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b33RO
                              )}
                            >
                              {
                                "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___11CUk
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__p5Kow)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uGbes
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mp7A4
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hHgx0
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__nOy1A
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1N1F2
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wxL2N
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__iIbs
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__c7CcB
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vBldC
                              )}
                            >
                              {
                                "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6K7Fk
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kxU4)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gsYZn
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mLqqm
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rj7Ot
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___67Y6X
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__uAuiS
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yIfn1
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__gHg9
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2Dr
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__kf740
                              )}
                            >
                              {
                                "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__uftAq
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ofzR)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b3IpH
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kwLj8
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2Hvt7
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kizLn
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___4HYup
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eP5Qh
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__g40Sj
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__d3IxP
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___7Zp9F
                              )}
                            >
                              {
                                "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__n9OPv
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"aboutUs2"}
            data-plasmic-override={overrides.aboutUs2}
            hasGap={true}
            className={classNames(projectcss.all, sty.aboutUs2)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wLm0Y)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"foreground2"}
                data-plasmic-override={overrides.foreground2}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground2)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__pWryJ)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__bYibd)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__qUwbU)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wtGzb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pzVyU
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                fontWeight: 700,
                                textDecorationLine: "underline",
                                color: "var(--token-FC-eCcS5kWsT)"
                              }}
                            >
                              {
                                "\u0e04\u0e33\u0e21\u0e31\u0e48\u0e19\u0e2a\u0e31\u0e0d\u0e0d\u0e32"
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fbqPd
                          )}
                        >
                          {
                            "\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e08\u0e30\u0e23\u0e31\u0e01\u0e29\u0e32\u0e44\u0e27\u0e49\u0e0b\u0e36\u0e48\u0e07\u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19\u0e0a\u0e31\u0e49\u0e19\u0e40\u0e22\u0e35\u0e48\u0e22\u0e21\u0e17\u0e31\u0e49\u0e07\u0e43\u0e19\u0e23\u0e30\u0e14\u0e31\u0e1a\u0e1b\u0e0e\u0e34\u0e1a\u0e31\u0e15\u0e34\u0e01\u0e32\u0e23\u0e41\u0e25\u0e30\u0e23\u0e30\u0e14\u0e31\u0e1a\u0e1a\u0e23\u0e34\u0e2b\u0e32\u0e23 \u0e42\u0e14\u0e22\u0e17\u0e38\u0e01\u0e04\u0e19\u0e21\u0e35\u0e40\u0e1b\u0e49\u0e32\u0e2b\u0e21\u0e32\u0e22\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e19\u0e43\u0e19\u0e01\u0e32\u0e23\u0e19\u0e33\u0e40\u0e2a\u0e19\u0e2d\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e41\u0e01\u0e48\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e14\u0e49\u0e27\u0e22 \u0e1c\u0e25\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 \u0e23\u0e27\u0e21\u0e17\u0e31\u0e49\u0e07\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23 \u0e0b\u0e36\u0e48\u0e07\u0e44\u0e21\u0e48\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e41\u0e15\u0e48\u0e14\u0e35\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19 \u0e41\u0e15\u0e48\u0e22\u0e31\u0e07\u0e23\u0e27\u0e21\u0e44\u0e1b\u0e16\u0e36\u0e07\u0e1a\u0e38\u0e04\u0e25\u0e32\u0e01\u0e23\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e27\u0e32\u0e21\u0e23\u0e39\u0e49\u0e04\u0e27\u0e32\u0e21\u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e41\u0e25\u0e30\u0e04\u0e27\u0e32\u0e21\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e25\u0e34\u0e28 \u0e1e\u0e19\u0e31\u0e01\u0e07\u0e32\u0e19\u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e48\u0e32\u0e07\u0e40\u0e17\u0e04\u0e19\u0e34\u0e04\u0e17\u0e35\u0e48\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e43\u0e19\u0e14\u0e49\u0e32\u0e19\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e15\u0e25\u0e2d\u0e14\u0e08\u0e19\u0e1c\u0e39\u0e49\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23\u0e17\u0e38\u0e01\u0e04\u0e19 \u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e1d\u0e36\u0e01\u0e1d\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e14\u0e35 \u0e23\u0e27\u0e21\u0e17\u0e31\u0e49\u0e07\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a\u0e23\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e2a\u0e16\u0e32\u0e1a\u0e31\u0e19\u0e1d\u0e36\u0e01\u0e2d\u0e1a\u0e23\u0e21\u0e14\u0e49\u0e32\u0e19\u0e40\u0e17\u0e04\u0e19\u0e34\u0e04\u0e17\u0e35\u0e48\u0e21\u0e35\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19 \u0e19\u0e2d\u0e01\u0e40\u0e2b\u0e19\u0e37\u0e2d\u0e44\u0e1b\u0e08\u0e32\u0e01\u0e1b\u0e23\u0e30\u0e2a\u0e1a\u0e01\u0e32\u0e23\u0e13\u0e4c\u0e43\u0e19\u0e01\u0e32\u0e23\u0e17\u0e33\u0e07\u0e32\u0e19\u0e0b\u0e36\u0e48\u0e07\u0e04\u0e23\u0e48\u0e33\u0e2b\u0e27\u0e2d\u0e14\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e2d\u0e38\u0e15\u0e2a\u0e32\u0e2b\u0e01\u0e23\u0e23\u0e21\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e25\u0e30\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e22\u0e32\u0e27\u0e19\u0e32\u0e19"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fsVz
                          )}
                        >
                          {
                            "\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e1e\u0e23\u0e49\u0e2d\u0e21\u0e17\u0e35\u0e48\u0e08\u0e30\u0e15\u0e48\u0e2d\u0e2a\u0e39\u0e49\u0e1f\u0e31\u0e19\u0e1d\u0e48\u0e32\u0e2d\u0e38\u0e1b\u0e2a\u0e23\u0e23\u0e04\u0e15\u0e48\u0e32\u0e07\u0e46 \u0e43\u0e19\u0e2d\u0e19\u0e32\u0e04\u0e15 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e19\u0e33\u0e40\u0e2a\u0e19\u0e2d\u0e1c\u0e25\u0e07\u0e32\u0e19\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e17\u0e35\u0e48\u0e21\u0e35\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e2a\u0e19\u0e2d\u0e07\u0e15\u0e2d\u0e1a\u0e15\u0e48\u0e2d\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e09\u0e31\u0e1a\u0e44\u0e27\u0e2a\u0e21\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e44\u0e27\u0e49\u0e27\u0e32\u0e07\u0e43\u0e08\u0e08\u0e32\u0e01\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32\u0e40\u0e2a\u0e21\u0e2d\u0e21\u0e32"
                          }
                        </div>
                      </Stack__>
                    </Stack__>
                  </div>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Htvf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__b0Si2)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0HdZz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zvbFb
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___34Nvk
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qThqi
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jBIuU
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dhQzj
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__kPtds
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__irn04
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__g7V1R
                              )}
                            >
                              {
                                "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ssfuL
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__omzAa)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tis6V
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lcno6
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__s5Ucg
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l017B
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__kb1Nf
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hi2Oo
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__c5Uko
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__t3MNq
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2PYCm
                              )}
                            >
                              {
                                "PERMATANK\u00ae \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dd8Vv
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__byOwz)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fpEPy
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hN4U
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___0NTn0
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yhplt
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__iTb7K
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nifBh
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__erPgG
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__h0RvA
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jIhQq
                              )}
                            >
                              {
                                "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hvrbj
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vUxFx)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jVecf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__etcX6
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zfLti
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cdQDm
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__nrSe
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lnNNt
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__obkG9
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hqK9
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yrgMg
                              )}
                            >
                              {
                                "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___7Wq0F
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ougd3)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xFlr9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ifQxu
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hujOl
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__o8ZZp
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__g1CC8
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rfLlY
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__sZ3Z2
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rvBuh
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__diTii
                              )}
                            >
                              {
                                "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__te2GK
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mopuy)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1EOoj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___41Fcs
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gjbm9
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tJowT
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___28GRc
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zycl3
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__g0WT7
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vlvAe
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__biAiZ
                              )}
                            >
                              {
                                "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fyzRr
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: [
    "page",
    "header3",
    "bannerHeader",
    "h1",
    "subHeader2",
    "aboutUs",
    "foreground",
    "aboutUs2",
    "foreground2",
    "footer2"
  ],
  header3: ["header3"],
  bannerHeader: ["bannerHeader", "h1"],
  h1: ["h1"],
  subHeader2: ["subHeader2"],
  aboutUs: ["aboutUs", "foreground"],
  foreground: ["foreground"],
  aboutUs2: ["aboutUs2", "foreground2"],
  foreground2: ["foreground2"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "div";
  header3: typeof Header3;
  bannerHeader: "div";
  h1: "h1";
  subHeader2: "div";
  aboutUs: "div";
  foreground: "div";
  aboutUs2: "div";
  foreground2: "div";
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPadungsilpaGroup4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPadungsilpaGroup4__VariantsArgs;
    args?: PlasmicPadungsilpaGroup4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPadungsilpaGroup4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPadungsilpaGroup4__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPadungsilpaGroup4__ArgProps,
          internalVariantPropNames: PlasmicPadungsilpaGroup4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPadungsilpaGroup4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicPadungsilpaGroup4";
  } else {
    func.displayName = `PlasmicPadungsilpaGroup4.${nodeName}`;
  }
  return func;
}

export const PlasmicPadungsilpaGroup4 = Object.assign(
  // Top-level PlasmicPadungsilpaGroup4 renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    header3: makeNodeComponent("header3"),
    bannerHeader: makeNodeComponent("bannerHeader"),
    h1: makeNodeComponent("h1"),
    subHeader2: makeNodeComponent("subHeader2"),
    aboutUs: makeNodeComponent("aboutUs"),
    foreground: makeNodeComponent("foreground"),
    aboutUs2: makeNodeComponent("aboutUs2"),
    foreground2: makeNodeComponent("foreground2"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicPadungsilpaGroup4
    internalVariantProps: PlasmicPadungsilpaGroup4__VariantProps,
    internalArgProps: PlasmicPadungsilpaGroup4__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPadungsilpaGroup4;
/* prettier-ignore-end */
