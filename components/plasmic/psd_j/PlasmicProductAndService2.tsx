// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: wc_UOJSme2Ws

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: fMrxAl7coXSG/component
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import Footer2 from "../../Footer2"; // plasmic-import: 9pDOvBRTOpt9/component

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicProductAndService2.module.css"; // plasmic-import: wc_UOJSme2Ws/css

import CheckSvgIcon from "../plasmic_tabs/icons/PlasmicIcon__CheckSvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import ArrowRightIcon from "./icons/PlasmicIcon__ArrowRight"; // plasmic-import: HZOtD1fAEgQN/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: YDVzHW_YDla2/icon
import IconIcon2 from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8DjHUJI81s9x/icon

createPlasmicElementProxy;

export type PlasmicProductAndService2__VariantMembers = {};
export type PlasmicProductAndService2__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductAndService2__VariantsArgs;
export const PlasmicProductAndService2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicProductAndService2__ArgsType = {};
type ArgPropType = keyof PlasmicProductAndService2__ArgsType;
export const PlasmicProductAndService2__ArgProps = new Array<ArgPropType>();

export type PlasmicProductAndService2__OverridesType = {
  page?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  bannerHeader?: Flex__<"div">;
  h1?: Flex__<"h1">;
  foreground?: Flex__<"div">;
  sliderCarousel?: Flex__<typeof SliderWrapper>;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultProductAndService2Props {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductAndService2__RenderFunc(props: {
  variants: PlasmicProductAndService2__VariantsArgs;
  args: PlasmicProductAndService2__ArgsType;
  overrides: PlasmicProductAndService2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"page"}
          data-plasmic-override={overrides.page}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.page
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"bannerHeader"}
            data-plasmic-override={overrides.bannerHeader}
            className={classNames(projectcss.all, sty.bannerHeader)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zrUgI)}>
              <div className={classNames(projectcss.all, sty.freeBox__oyEzc)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fwekX)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23"
                      : "\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23"}
                  </h1>
                </Stack__>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__z8TXa)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__j9Q6B)}
            >
              <TabButton
                className={classNames("__wab_instance", sty.tabButton__setQm)}
                tabKey={"tab1"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__qWpV0)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__txzQn
                    )}
                  >
                    {
                      "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                    }
                  </div>
                </Button>
              </TabButton>
              <TabButton
                className={classNames("__wab_instance", sty.tabButton__cwjKf)}
                tabKey={"tab1"}
              >
                <Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dXVbn
                    )}
                  >
                    {
                      "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                    }
                  </div>
                </Button>
              </TabButton>
              <TabButton
                className={classNames("__wab_instance", sty.tabButton___93Plh)}
                tabKey={"tab1"}
              >
                <Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jbBe
                    )}
                  >
                    {
                      "PERMATANK \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a \u0e15\u0e48\u0e32\u0e07\u0e46"
                    }
                  </div>
                </Button>
              </TabButton>
              <TabButton
                className={classNames("__wab_instance", sty.tabButton___16Gef)}
                tabKey={"tab1"}
              >
                <Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dRGc
                    )}
                  >
                    {
                      "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                    }
                  </div>
                </Button>
              </TabButton>
              <TabButton
                className={classNames("__wab_instance", sty.tabButton___7Xihc)}
                tabKey={"tab1"}
              >
                <Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b1Mxd
                    )}
                  >
                    {
                      "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                    }
                  </div>
                </Button>
              </TabButton>
              <TabButton
                className={classNames("__wab_instance", sty.tabButton__mzIqF)}
                tabKey={"tab1"}
              >
                <Button>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vbGw2
                    )}
                  >
                    {
                      "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                    }
                  </div>
                </Button>
              </TabButton>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2Ifyo)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f2Yx3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"foreground"}
                data-plasmic-override={overrides.foreground}
                hasGap={true}
                className={classNames(projectcss.all, sty.foreground)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__vNb26)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__sxh6G)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__emvM1)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__cfLO
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14"
                          : "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e04\u0e23\u0e1a\u0e27\u0e07\u0e08\u0e23"}
                      </h2>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lN2Io
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__spkYw
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                fontWeight: 700,
                                color: "var(--token-FC-eCcS5kWsT)"
                              }}
                            >
                              {
                                "\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17 \u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c\u0e42\u0e22\u0e18\u0e32\u0e01\u0e32\u0e23 \u0e08\u0e33\u0e01\u0e31\u0e14 (PCW) \u0e40\u0e1b\u0e47\u0e19\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e0a\u0e31\u0e49\u0e19\u0e19\u0e33"
                              }
                            </span>
                            <React.Fragment>
                              {
                                " \u0e17\u0e35\u0e48\u0e40\u0e0a\u0e35\u0e48\u0e22\u0e27\u0e0a\u0e32\u0e0d\u0e41\u0e25\u0e30\u0e21\u0e32\u0e01\u0e14\u0e49\u0e27\u0e22\u0e1b\u0e23\u0e30\u0e2a\u0e1a\u0e01\u0e32\u0e23\u0e13\u0e4c \u0e43\u0e19\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19 \u0e41\u0e25\u0e30\u0e01\u0e4a\u0e32\u0e0b \u0e15\u0e25\u0e2d\u0e14\u0e08\u0e19\u0e07\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19\u0e46\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e21\u0e35\u0e1c\u0e25\u0e07\u0e32\u0e19\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e40\u0e0a\u0e37\u0e48\u0e2d\u0e16\u0e37\u0e2d \u0e41\u0e25\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e04\u0e27\u0e32\u0e21\u0e44\u0e27\u0e49\u0e27\u0e32\u0e07\u0e43\u0e08 \u0e08\u0e32\u0e01\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e0a\u0e31\u0e49\u0e19\u0e19\u0e33 PCW \u0e44\u0e14\u0e49\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e41\u0e25\u0e30\u0e2a\u0e48\u0e07\u0e21\u0e2d\u0e1a\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e42\u0e14\u0e14\u0e40\u0e14\u0e48\u0e19\u0e2b\u0e25\u0e32\u0e22\u0e42\u0e04\u0e23\u0e07\u0e01\u0e32\u0e23 \u0e0b\u0e36\u0e48\u0e07\u0e01\u0e27\u0e48\u0e32\u0e23\u0e49\u0e2d\u0e22\u0e25\u0e30 75 \u0e40\u0e1b\u0e47\u0e19\u0e07\u0e32\u0e19\u0e17\u0e32\u0e07\u0e14\u0e49\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07 \u0e1e\u0e31\u0e12\u0e19\u0e32 \u0e41\u0e25\u0e30\u0e1b\u0e23\u0e31\u0e1a\u0e1b\u0e23\u0e38\u0e07\u0e20\u0e32\u0e1e\u0e25\u0e31\u0e01\u0e29\u0e13\u0e4c\u0e02\u0e2d\u0e07\u0e41\u0e1a\u0e23\u0e19\u0e14\u0e4c\u0e0a\u0e31\u0e49\u0e19\u0e19\u0e33, \u0e23\u0e49\u0e32\u0e19\u0e2a\u0e30\u0e14\u0e27\u0e01\u0e0b\u0e37\u0e49\u0e2d, LPG, \u0e41\u0e25\u0e30\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23 NGV \u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e04\u0e23\u0e1a\u0e27\u0e07\u0e08\u0e23\u0e17\u0e31\u0e49\u0e07\u0e43\u0e19\u0e14\u0e49\u0e32\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e01\u0e25, \u0e44\u0e1f\u0e1f\u0e49\u0e32, \u0e42\u0e22\u0e18\u0e32, \u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07, \u0e2a\u0e34\u0e48\u0e07\u0e41\u0e27\u0e14\u0e25\u0e49\u0e2d\u0e21 \u0e41\u0e25\u0e30\u0e42\u0e04\u0e23\u0e07\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e1e\u0e37\u0e49\u0e19\u0e10\u0e32\u0e19\u0e2d\u0e37\u0e48\u0e19 \u0e46"
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__t40Jp
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___3QI2M
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ayGiq
                              )}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tp3Ya
                                )}
                                role={"img"}
                              />
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__p6R4
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__qBgMc
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__y6Rlw
                              )}
                            >
                              <Stack__
                                as={PlasmicLink__}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__qMF
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ixbj
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nn4S
                                  )}
                                >
                                  {
                                    "\u0e04\u0e34\u0e14\u0e16\u0e36\u0e07\u0e1b\u0e31\u0e4a\u0e21\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e04\u0e38\u0e13\u0e20\u0e32\u0e1e\u0e21\u0e32\u0e15\u0e23\u0e10\u0e32\u0e19"
                                  }
                                </div>
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__kSrpr
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sYf8X
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__iEx1N
                              )}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hDi7N
                                )}
                                role={"img"}
                              />
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__niKd4
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jAsKx
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yMgGx
                              )}
                            >
                              <Stack__
                                as={PlasmicLink__}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link___6SPi9
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aYpej
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yCo4C
                                  )}
                                >
                                  {
                                    "\u0e23\u0e49\u0e32\u0e19\u0e01\u0e32\u0e41\u0e1f\u0e2a\u0e27\u0e22\u0e46"
                                  }
                                </div>
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__xqWic
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mzfsA
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ihKmh
                              )}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tqaR3
                                )}
                                role={"img"}
                              />
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3GdM4
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__zfQb5
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___1EzJv
                              )}
                            >
                              <Stack__
                                as={PlasmicLink__}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__nhEyW
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__dmw1E
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fuGQv
                                  )}
                                >
                                  {
                                    "\u0e40\u0e1b\u0e34\u0e14\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e44\u0e14\u0e49\u0e15\u0e23\u0e07\u0e15\u0e32\u0e21\u0e04\u0e27\u0e32\u0e21\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32"
                                  }
                                </div>
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__uHan
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__a3KKm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rnrxl
                              )}
                            >
                              <ArrowRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vlwO
                                )}
                                role={"img"}
                              />
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : false
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__aTKd
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___9OuU5
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__keje
                              )}
                            >
                              <Stack__
                                as={PlasmicLink__}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.a,
                                  sty.link__hpviy
                                )}
                                component={Link}
                                href={`/`}
                                platform={"nextjs"}
                              >
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aMeUg
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__seyUw
                                  )}
                                >
                                  {
                                    "\u0e07\u0e1a\u0e01\u0e32\u0e23\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e44\u0e21\u0e48\u0e1a\u0e32\u0e19\u0e1b\u0e25\u0e32\u0e22"
                                  }
                                </div>
                                {false ? (
                                  <IconIcon2
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pwDq
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </Stack__>
                            </Stack__>
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </div>
                </Stack__>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3UhZt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s0Dsk)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0LxOa
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lZrH
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___8LV1R
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ylDnm
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__byp2H
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kjGun
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__lrKkJ
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__xrvho
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pqZJv
                              )}
                            >
                              {
                                "\u0e07\u0e32\u0e19\u0e01\u0e48\u0e2d\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__soK2Y
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wu6Rg)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n8HQd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3Hp4O
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iugq8
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7TkHk
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__j8Lfc
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__i1D1
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___2SqSm
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kvKtu
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fh0R
                              )}
                            >
                              {
                                "PERMATANK\u00ae \u0e41\u0e25\u0e30\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e41\u0e1a\u0e1a\u0e15\u0e48\u0e32\u0e07\u0e46"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ehkp9
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ftv7)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yrGoz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cghJh
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rIvJ7
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tclgU
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__luRmd
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6Cnnh
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___3AgPf
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rh4Vt
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3BWm3
                              )}
                            >
                              {
                                "\u0e08\u0e33\u0e2b\u0e19\u0e48\u0e32\u0e22\u0e41\u0e25\u0e30\u0e15\u0e34\u0e14\u0e15\u0e31\u0e49\u0e07\u0e17\u0e48\u0e2d\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\u0e1c\u0e19\u0e31\u0e07 2 \u0e0a\u0e31\u0e49\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__sjA8U
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__k1Hln)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vvekl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vgytJ
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nhQuH
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ha00E
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xQlCp
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hwIyE
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___4BrDt
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yjItw
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lrZe2
                              )}
                            >
                              {
                                "\u0e23\u0e30\u0e1a\u0e1a\u0e27\u0e31\u0e14\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e2d\u0e31\u0e15\u0e42\u0e19\u0e21\u0e31\u0e15\u0e34\u0e20\u0e32\u0e22\u0e43\u0e19\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__dTt96
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dwtyN)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z06R9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uVq
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__k2EYk
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dJ7Fj
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2CiQs
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rQ6H
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__en9Qd
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hjutE
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__oaDw
                              )}
                            >
                              {
                                "\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___5FObu
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rrXPl)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1PoUb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__skNo0
                          )}
                        >
                          <ArrowRightIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fp1Qo
                            )}
                            role={"img"}
                          />
                        </div>
                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___1XPb
                            )}
                          >
                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__oXfU
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yYlrn
                          )}
                        >
                          <Stack__
                            as={PlasmicLink__}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___6CO6R
                            )}
                            component={Link}
                            href={`/`}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ttEmh
                                )}
                                role={"img"}
                              />
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m6Sz
                              )}
                            >
                              {
                                "\u0e43\u0e2b\u0e49\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e15\u0e48\u0e32\u0e07\u0e46\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                              }
                            </div>
                            {false ? (
                              <IconIcon2
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rH9M9
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </Stack__>
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vZkQt)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fAh5)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__kreyr)}
              >
                <div className={classNames(projectcss.all, sty.column__wmHdo)}>
                  {(() => {
                    const child$Props = {
                      arrows: true,
                      autoplay: true,
                      beforeChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "currentSlide",
                          ["sliderCarousel", "currentSlide"],
                          SliderWrapper_Helpers
                        ).apply(null, eventArgs);
                      },
                      centerMode: false,
                      className: classNames(
                        "__wab_instance",
                        sty.sliderCarousel
                      ),
                      dots: true,
                      draggable: true,
                      initialSlide: generateStateValueProp($state, [
                        "sliderCarousel",
                        "currentSlide"
                      ]),
                      ref: ref => {
                        $refs["sliderCarousel"] = ref;
                      },
                      rows: 1,
                      rtl: false,
                      sliderScopeClassName: sty["sliderCarousel__slider"],
                      slidesPerRow: 1,
                      slidesToScroll: 1,
                      slidesToShow: 1,
                      speed: 1000,
                      swipe: true,
                      swipeToSlide: true,
                      touchMove: true,
                      useCSS: false,
                      useTransform: true
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "currentSlide",
                          plasmicStateName: "sliderCarousel.currentSlide"
                        }
                      ],
                      [],
                      SliderWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <SliderWrapper
                        data-plasmic-name={"sliderCarousel"}
                        data-plasmic-override={overrides.sliderCarousel}
                        {...child$Props}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__l2Cop)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          src={{
                            src: "/plasmic/psd_j/images/pdsPro0118Jpg.jpg",
                            fullWidth: 1479,
                            fullHeight: 1109,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__cNl8A)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/psd_j/images/_17ConPds311024X1024Jpg.jpg",
                            fullWidth: 1024,
                            fullHeight: 1024,
                            aspectRatio: undefined
                          }}
                        />

                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___71Lt1)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "320px"
                              : "500px"
                          }
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"100%"}
                          src={{
                            src: "/plasmic/psd_j/images/fb24090907Jpg.jpg",
                            fullWidth: 1477,
                            fullHeight: 1108,
                            aspectRatio: undefined
                          }}
                        />
                      </SliderWrapper>
                    );
                  })()}
                </div>
                <div className={classNames(projectcss.all, sty.column__aecdA)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rflGj)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__n9GrV
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e1a\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\r\n\u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46\r\n\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e48\u0e2d\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07 \u00a0"
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\r\u00a0\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32"
                            }
                          </span>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e1e\u0e31\u0e12\u0e19\u0e32\u0e41\u0e1a\u0e1a\u0e16\u0e31\u0e07\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19\u0e43\u0e15\u0e49\u0e14\u0e34\u0e19\r\n\u0e41\u0e25\u0e30\u0e2d\u0e38\u0e1b\u0e01\u0e23\u0e13\u0e4c\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e15\u0e48\u0e32\u0e07\u0e46\r\n\u0e2d\u0e22\u0e48\u0e32\u0e07\u0e15\u0e48\u0e2d\u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07 "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\r"
                            }
                          </span>
                          <React.Fragment>{"\n"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "var(--token-Om8MnecN_61Q)" }}
                          >
                            {
                              "\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32"
                            }
                          </span>
                        </React.Fragment>
                      )}
                    </h2>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wz4HO)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__myCys
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "\u0e20\u0e32\u0e22\u0e43\u0e15\u0e49\u0e19\u0e42\u0e22\u0e1a\u0e32\u0e22\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32 "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {
                              "\u201d\u0e16\u0e39\u0e01\u0e15\u0e49\u0e2d\u0e07 \u0e16\u0e39\u0e01\u0e15\u0e31\u0e07\u0e04\u0e4c \u0e17\u0e31\u0e19\u0e40\u0e27\u0e25\u0e32 \u0e1b\u0e25\u0e2d\u0e14\u0e20\u0e31\u0e22\u201d"
                            }
                          </span>
                          <React.Fragment>
                            {
                              " \u0e41\u0e25\u0e30\u0e40\u0e19\u0e49\u0e19\u0e1b\u0e23\u0e30\u0e42\u0e22\u0e0a\u0e19\u0e4c\u0e2a\u0e39\u0e07\u0e2a\u0e38\u0e14\u0e02\u0e2d\u0e07\u0e25\u0e39\u0e01\u0e04\u0e49\u0e32 \u0e1c\u0e39\u0e49\u0e23\u0e31\u0e1a\u0e40\u0e2b\u0e21\u0e32\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e04\u0e49\u0e32\u0e2d\u0e37\u0e48\u0e19\u0e46 \u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e1a\u0e07\u0e32\u0e19\u0e2a\u0e16\u0e32\u0e19\u0e35\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23\u0e19\u0e49\u0e33\u0e21\u0e31\u0e19"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </Stack__>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  page: [
    "page",
    "header",
    "bannerHeader",
    "h1",
    "foreground",
    "sliderCarousel",
    "footer2"
  ],
  header: ["header"],
  bannerHeader: ["bannerHeader", "h1"],
  h1: ["h1"],
  foreground: ["foreground"],
  sliderCarousel: ["sliderCarousel"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  page: "div";
  header: typeof Header;
  bannerHeader: "div";
  h1: "h1";
  foreground: "div";
  sliderCarousel: typeof SliderWrapper;
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductAndService2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductAndService2__VariantsArgs;
    args?: PlasmicProductAndService2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductAndService2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductAndService2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductAndService2__ArgProps,
          internalVariantPropNames: PlasmicProductAndService2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductAndService2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "page") {
    func.displayName = "PlasmicProductAndService2";
  } else {
    func.displayName = `PlasmicProductAndService2.${nodeName}`;
  }
  return func;
}

export const PlasmicProductAndService2 = Object.assign(
  // Top-level PlasmicProductAndService2 renders the root element
  makeNodeComponent("page"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    bannerHeader: makeNodeComponent("bannerHeader"),
    h1: makeNodeComponent("h1"),
    foreground: makeNodeComponent("foreground"),
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicProductAndService2
    internalVariantProps: PlasmicProductAndService2__VariantProps,
    internalArgProps: PlasmicProductAndService2__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductAndService2;
/* prettier-ignore-end */
