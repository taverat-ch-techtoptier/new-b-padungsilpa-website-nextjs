// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: JCUruiiBoiUY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicHeader2.module.css"; // plasmic-import: JCUruiiBoiUY/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8DjHUJI81s9x/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: j3O30Vm7ASIR/icon
import ChevronDown2Icon from "./icons/PlasmicIcon__ChevronDown2"; // plasmic-import: 3--cQcKjpw4M/icon
import MenuBurgerSvg2Icon from "./icons/PlasmicIcon__MenuBurgerSvg2"; // plasmic-import: MzINOQNCDIRw/icon

createPlasmicElementProxy;

export type PlasmicHeader2__VariantMembers = {
  scrolled: "scrolled";
};
export type PlasmicHeader2__VariantsArgs = {
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
};
type VariantPropType = keyof PlasmicHeader2__VariantsArgs;
export const PlasmicHeader2__VariantProps = new Array<VariantPropType>(
  "scrolled"
);

export type PlasmicHeader2__ArgsType = {};
type ArgPropType = keyof PlasmicHeader2__ArgsType;
export const PlasmicHeader2__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader2__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultHeader2Props {
  scrolled?: SingleBooleanChoiceArg<"scrolled">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader2__RenderFunc(props: {
  variants: PlasmicHeader2__VariantsArgs;
  args: PlasmicHeader2__ArgsType;
  overrides: PlasmicHeader2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "scrolled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.scrolled
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootscrolled]: hasVariant($state, "scrolled", "scrolled") }
      )}
      onScroll={async event => {
        const $steps = {};

        $steps["updateScrolled"] = (() => {
          {
            {
              return scrollY > 82;
            }
          }
        })()
          ? (() => {
              const actionArgs = {
                vgroup: "scrolled",
                operation: 4,
                value: "scrolled"
              };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, true);
                return true;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateScrolled"] != null &&
          typeof $steps["updateScrolled"] === "object" &&
          typeof $steps["updateScrolled"].then === "function"
        ) {
          $steps["updateScrolled"] = await $steps["updateScrolled"];
        }

        $steps["updateScrolled2"] = (() => {
          {
            {
              return scrollY <= 82;
            }
          }
        })()
          ? (() => {
              const actionArgs = { vgroup: "scrolled", operation: 6 };
              return (({ vgroup, value }) => {
                if (typeof value === "string") {
                  value = [value];
                }

                $stateSet($state, vgroup, false);
                return false;
              })?.apply(null, [actionArgs]);
            })()
          : undefined;
        if (
          $steps["updateScrolled2"] != null &&
          typeof $steps["updateScrolled2"] === "object" &&
          typeof $steps["updateScrolled2"].then === "function"
        ) {
          $steps["updateScrolled2"] = await $steps["updateScrolled2"];
        }
      }}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mqe8, {
          [sty.freeBoxscrolled__mqe8XtlaF]: hasVariant(
            $state,
            "scrolled",
            "scrolled"
          )
        })}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__b7OBq, {
            [sty.linkscrolled__b7OBqXtlaF]: hasVariant(
              $state,
              "scrolled",
              "scrolled"
            )
          })}
          component={Link}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgscrolled]: hasVariant($state, "scrolled", "scrolled")
            })}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "52px"
                : "64px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "60px"
                : "109px"
            }
            loading={"lazy"}
            src={
              hasVariant($state, "scrolled", "scrolled")
                ? {
                    src: "/plasmic/psd_j/images/logo1Svg.svg",
                    fullWidth: 55,
                    fullHeight: 48,
                    aspectRatio: 1.145833
                  }
                : hasVariant(globalVariants, "screen", "mobileOnly")
                ? {
                    src: "/plasmic/psd_j/images/logoPng.png",
                    fullWidth: 328,
                    fullHeight: 192,
                    aspectRatio: undefined
                  }
                : {
                    src: "/plasmic/psd_j/images/logoPng.png",
                    fullWidth: 328,
                    fullHeight: 192,
                    aspectRatio: undefined
                  }
            }
          />
        </PlasmicLink__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__akt4K)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pzNjQ)}
        >
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__wj13L
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__pdfRk)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g3X7H
              )}
            >
              {"\u0e2b\u0e19\u0e49\u0e32\u0e2b\u0e25\u0e31\u0e01"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__mTKoy)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___4UzQ1
            )}
            component={Link}
            href={`/History`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__cndD3)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___7Z0Lz
              )}
            >
              {
                "\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c"
              }
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__r83Pj)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__nWor6
            )}
            component={Link}
            href={`/PERMATANK and Different Types of Fuel Tanks`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__zKEi)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kHhyg
              )}
            >
              {
                "\u0e2a\u0e34\u0e19\u0e04\u0e49\u0e32\u0e41\u0e25\u0e30\u0e1a\u0e23\u0e34\u0e01\u0e32\u0e23"
              }
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__adwpF)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__kf6Ou
            )}
            component={Link}
            href={`/Service Station Construction`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__cDe0)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__urp9X
              )}
            >
              {
                "\u0e1c\u0e25\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32"
              }
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__cKq)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__uYpzc
            )}
            component={Link}
            href={`/News and Activity`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__qjqrf)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___16Rd
              )}
            >
              {
                "\u0e02\u0e48\u0e32\u0e27\u0e2a\u0e32\u0e23\u0e41\u0e25\u0e30\u0e01\u0e34\u0e08\u0e01\u0e23\u0e23\u0e21"
              }
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__qJlIt)}
                role={"img"}
              />
            ) : null}
          </Stack__>
          <Stack__
            as={PlasmicLink__}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___5SsYk
            )}
            component={Link}
            href={`/contact-us`}
            platform={"nextjs"}
            target={"_blank"}
          >
            <IconIcon
              className={classNames(projectcss.all, sty.svg__jPqCc)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ppYak
              )}
            >
              {"\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e40\u0e23\u0e32"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__bC1If)}
                role={"img"}
              />
            ) : null}
          </Stack__>
        </Stack__>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aZy3)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__bVemG)}>
              <CircleIcon
                className={classNames(projectcss.all, sty.svg__eljyi)}
                role={"img"}
              />
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bhJri
              )}
            >
              {"\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e40\u0e23\u0e32"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__k5PQ)}>
              <ChevronDown2Icon
                className={classNames(projectcss.all, sty.svg__bYty5)}
                role={"img"}
              />
            </div>
            <MenuBurgerSvg2Icon
              className={classNames(projectcss.all, sty.svg__je0Or)}
              role={"img"}
            />
          </Stack__>
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader2__VariantsArgs;
    args?: PlasmicHeader2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader2__ArgProps,
          internalVariantPropNames: PlasmicHeader2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader2";
  } else {
    func.displayName = `PlasmicHeader2.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader2 = Object.assign(
  // Top-level PlasmicHeader2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHeader2
    internalVariantProps: PlasmicHeader2__VariantProps,
    internalArgProps: PlasmicHeader2__ArgProps
  }
);

export default PlasmicHeader2;
/* prettier-ignore-end */
