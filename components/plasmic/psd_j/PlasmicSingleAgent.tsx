// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: peb4zapuyEXB

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: fMrxAl7coXSG/component
import Footer2 from "../../Footer2"; // plasmic-import: 9pDOvBRTOpt9/component

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicSingleAgent.module.css"; // plasmic-import: peb4zapuyEXB/css

import _13616027201551939471SvgIcon from "./icons/PlasmicIcon___13616027201551939471Svg"; // plasmic-import: lXJ49SFW0l0e/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: YDVzHW_YDla2/icon
import _12454851961582823590SvgIcon from "./icons/PlasmicIcon___12454851961582823590Svg"; // plasmic-import: wLv-cuxrHYjG/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 3l5hCinkLRJ5/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: QbNOavY00qMy/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: 6GSnbq0MM0Zg/icon

createPlasmicElementProxy;

export type PlasmicSingleAgent__VariantMembers = {};
export type PlasmicSingleAgent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSingleAgent__VariantsArgs;
export const PlasmicSingleAgent__VariantProps = new Array<VariantPropType>();

export type PlasmicSingleAgent__ArgsType = {};
type ArgPropType = keyof PlasmicSingleAgent__ArgsType;
export const PlasmicSingleAgent__ArgProps = new Array<ArgPropType>();

export type PlasmicSingleAgent__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h2?: Flex__<"h2">;
  footer2?: Flex__<typeof Footer2>;
};

export interface DefaultSingleAgentProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSingleAgent__RenderFunc(props: {
  variants: PlasmicSingleAgent__VariantsArgs;
  args: PlasmicSingleAgent__ArgsType;
  overrides: PlasmicSingleAgent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__r46L0)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aegOw)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__j7ObQ)}>
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "200px"
                        : "400px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "200px"
                        : "400px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/psd_j/images/smile5047506640Jpg.jpg",
                      fullWidth: 640,
                      fullHeight: 427,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__o9M0Q)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__itY4K)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Check your listing"
                        : "Agent Name"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9ZCwQ
                      )}
                    >
                      {"Company name"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9CxSp
                      )}
                    >
                      {
                        "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient. A euismod eros a hendrerit tristique suscipit. A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient. A euismod eros a hendrerit tristique suscipit."
                      }
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3JJmq
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gTqBs
                        )}
                      >
                        <_13616027201551939471SvgIcon
                          className={classNames(projectcss.all, sty.svg__hoi8H)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ocUf4
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pkcD9
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k6Wd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__coAs8
                          )}
                        >
                          {"info@gmail.com"}
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yuC2V)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__njDk7
                        )}
                      >
                        <_12454851961582823590SvgIcon
                          className={classNames(projectcss.all, sty.svg__svdP7)}
                          role={"img"}
                        />
                      </div>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eovdk
                          )}
                        >
                          <Icon8Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tapg0
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6QWlm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jh62
                          )}
                        >
                          {"23353535553"}
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iUnBd)}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__su8NC
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__h3M8M)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__duVvt
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__lhpap)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__ia9B1
                        )}
                        component={Link}
                        href={"#"}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__sonuc)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Footer2
            data-plasmic-name={"footer2"}
            data-plasmic-override={overrides.footer2}
            className={classNames("__wab_instance", sty.footer2)}
          />
        </Stack__>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "columns", "img", "h2", "footer2"],
  header: ["header"],
  columns: ["columns", "img", "h2"],
  img: ["img"],
  h2: ["h2"],
  footer2: ["footer2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  columns: "div";
  img: typeof PlasmicImg__;
  h2: "h2";
  footer2: typeof Footer2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSingleAgent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSingleAgent__VariantsArgs;
    args?: PlasmicSingleAgent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSingleAgent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSingleAgent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSingleAgent__ArgProps,
          internalVariantPropNames: PlasmicSingleAgent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSingleAgent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSingleAgent";
  } else {
    func.displayName = `PlasmicSingleAgent.${nodeName}`;
  }
  return func;
}

export const PlasmicSingleAgent = Object.assign(
  // Top-level PlasmicSingleAgent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    footer2: makeNodeComponent("footer2"),

    // Metadata about props expected for PlasmicSingleAgent
    internalVariantProps: PlasmicSingleAgent__VariantProps,
    internalArgProps: PlasmicSingleAgent__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSingleAgent;
/* prettier-ignore-end */
