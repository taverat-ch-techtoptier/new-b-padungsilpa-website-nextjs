// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: 4arliTQcAY3d

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariants_2YPqM3KDWg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2yPqM3-kD-WG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicContactSectionFooterTop.module.css"; // plasmic-import: 4arliTQcAY3d/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 8DjHUJI81s9x/icon

createPlasmicElementProxy;

export type PlasmicContactSectionFooterTop__VariantMembers = {};
export type PlasmicContactSectionFooterTop__VariantsArgs = {};
type VariantPropType = keyof PlasmicContactSectionFooterTop__VariantsArgs;
export const PlasmicContactSectionFooterTop__VariantProps =
  new Array<VariantPropType>();

export type PlasmicContactSectionFooterTop__ArgsType = {};
type ArgPropType = keyof PlasmicContactSectionFooterTop__ArgsType;
export const PlasmicContactSectionFooterTop__ArgProps =
  new Array<ArgPropType>();

export type PlasmicContactSectionFooterTop__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  h2?: Flex__<"h2">;
  ชื่อ?: Flex__<"input">;
  textarea?: Flex__<"textarea">;
};

export interface DefaultContactSectionFooterTopProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContactSectionFooterTop__RenderFunc(props: {
  variants: PlasmicContactSectionFooterTop__VariantsArgs;
  args: PlasmicContactSectionFooterTop__ArgsType;
  overrides: PlasmicContactSectionFooterTop__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2YPqM3KDWg()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__u16Rh)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? {
                    src: "/plasmic/psd_j/images/nordwoodThemesQ8U1YgBaRQkUnsplashJpg.jpg",
                    fullWidth: 5032,
                    fullHeight: 3355,
                    aspectRatio: undefined
                  }
                : {
                    src: "/plasmic/psd_j/images/nordwoodThemesQ8U1YgBaRQkUnsplashJpg.jpg",
                    fullWidth: 5032,
                    fullHeight: 3355,
                    aspectRatio: undefined
                  }
            }
          />
        </div>
        <div className={classNames(projectcss.all, sty.column__fmJn7)}>
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {
              "\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e2a\u0e2d\u0e1a\u0e16\u0e32\u0e21\u0e01\u0e25\u0e38\u0e48\u0e21\u0e1a\u0e23\u0e34\u0e29\u0e31\u0e17\u0e1c\u0e14\u0e38\u0e07\u0e28\u0e34\u0e25\u0e1b\u0e4c"
            }
          </h2>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xUsjF
            )}
          >
            {
              "\u0e01\u0e23\u0e38\u0e13\u0e32\u0e01\u0e23\u0e2d\u0e01\u0e41\u0e1a\u0e1a\u0e1f\u0e2d\u0e23\u0e4c\u0e21\u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19\u0e17\u0e35\u0e21\u0e07\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d\u0e01\u0e25\u0e31\u0e1a\u0e17\u0e48\u0e32\u0e19\u0e42\u0e14\u0e22\u0e40\u0e23\u0e47\u0e27\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__u9UJs)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__crJ6W)}
            >
              <input
                data-plasmic-name={"\u0e0a\u0e37\u0e48\u0e2d"}
                data-plasmic-override={overrides.ชื่อ}
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.ชื่อ
                )}
                placeholder={"\u0e0a\u0e37\u0e48\u0e2d\u0e08\u0e23\u0e34\u0e07"}
                ref={ref => {
                  $refs["\u0e0a\u0e37\u0e48\u0e2d"] = ref;
                }}
                size={1}
                type={"text"}
                value={""}
              />

              <input
                className={classNames(
                  projectcss.all,
                  projectcss.input,
                  sty.textInput___2Ltgj
                )}
                placeholder={"\u0e19\u0e32\u0e21\u0e2a\u0e01\u0e38\u0e25"}
                size={1}
                type={"text"}
                value={""}
              />
            </Stack__>
            <input
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput__swMM
              )}
              placeholder={"\u0e2d\u0e35\u0e40\u0e21\u0e25"}
              size={1}
              type={"text"}
              value={""}
            />

            <input
              className={classNames(
                projectcss.all,
                projectcss.input,
                sty.textInput__qjEjc
              )}
              placeholder={
                "\u0e40\u0e1a\u0e2d\u0e23\u0e4c\u0e15\u0e34\u0e14\u0e15\u0e48\u0e2d"
              }
              size={1}
              type={"text"}
              value={""}
            />

            <textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames(
                projectcss.all,
                projectcss.textarea,
                sty.textarea
              )}
              placeholder={"\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21"}
              value={""}
            />

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            ) ? (
              <Stack__
                as={PlasmicLink__}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__jwrD6
                )}
                component={Link}
                href={`/contact-us`}
                platform={"nextjs"}
              >
                {false ? (
                  <IconIcon
                    className={classNames(projectcss.all, sty.svg__zy8Y1)}
                    role={"img"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t7AK
                  )}
                >
                  {"\u0e2a\u0e48\u0e07"}
                </div>
              </Stack__>
            ) : null}
            <Stack__
              as={PlasmicLink__}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__nE0Es
              )}
              component={Link}
              href={`/`}
              platform={"nextjs"}
            >
              {false ? (
                <IconIcon
                  className={classNames(projectcss.all, sty.svg___0UvgV)}
                  role={"img"}
                />
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nqOsm
                )}
              >
                {"\u0e2a\u0e48\u0e07"}
              </div>
            </Stack__>
          </div>
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "img",
    "h2",
    "\u0e0a\u0e37\u0e48\u0e2d",
    "textarea"
  ],
  columns: ["columns", "img", "h2", "\u0e0a\u0e37\u0e48\u0e2d", "textarea"],
  img: ["img"],
  h2: ["h2"],
  ชื่อ: ["\u0e0a\u0e37\u0e48\u0e2d"],
  textarea: ["textarea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: typeof PlasmicImg__;
  h2: "h2";
  ชื่อ: "input";
  textarea: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContactSectionFooterTop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContactSectionFooterTop__VariantsArgs;
    args?: PlasmicContactSectionFooterTop__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContactSectionFooterTop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContactSectionFooterTop__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContactSectionFooterTop__ArgProps,
          internalVariantPropNames: PlasmicContactSectionFooterTop__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContactSectionFooterTop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContactSectionFooterTop";
  } else {
    func.displayName = `PlasmicContactSectionFooterTop.${nodeName}`;
  }
  return func;
}

export const PlasmicContactSectionFooterTop = Object.assign(
  // Top-level PlasmicContactSectionFooterTop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    ชื่อ: makeNodeComponent("\u0e0a\u0e37\u0e48\u0e2d"),
    textarea: makeNodeComponent("textarea"),

    // Metadata about props expected for PlasmicContactSectionFooterTop
    internalVariantProps: PlasmicContactSectionFooterTop__VariantProps,
    internalArgProps: PlasmicContactSectionFooterTop__ArgProps
  }
);

export default PlasmicContactSectionFooterTop;
/* prettier-ignore-end */
