// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wauR2tk1hPNKxeSBCX7ndF
// Component: 9LMKHLPEcISp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: wauR2tk1hPNKxeSBCX7ndF/projectcss
import sty from "./PlasmicButton.module.css"; // plasmic-import: 9LMKHLPEcISp/css

import Home2SvgIcon from "./icons/PlasmicIcon__Home2Svg"; // plasmic-import: tOwa6r_30gMK/icon
import AngleDownSvgIcon from "./icons/PlasmicIcon__AngleDownSvg"; // plasmic-import: o-EUHSnekLZV/icon

createPlasmicElementProxy;

export type PlasmicButton__VariantMembers = {
  primary: "solid" | "outline" | "ghost";
  secondary: "solid" | "outline";
  leftIcon: "leftIcon";
  rightIcon: "rightIcon";
};
export type PlasmicButton__VariantsArgs = {
  primary?: SingleChoiceArg<"solid" | "outline" | "ghost">;
  secondary?: SingleChoiceArg<"solid" | "outline">;
  leftIcon?: SingleBooleanChoiceArg<"leftIcon">;
  rightIcon?: SingleBooleanChoiceArg<"rightIcon">;
};
type VariantPropType = keyof PlasmicButton__VariantsArgs;
export const PlasmicButton__VariantProps = new Array<VariantPropType>(
  "primary",
  "secondary",
  "leftIcon",
  "rightIcon"
);

export type PlasmicButton__ArgsType = {
  buttonText?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicButton__ArgsType;
export const PlasmicButton__ArgProps = new Array<ArgPropType>(
  "buttonText",
  "children"
);

export type PlasmicButton__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultButtonProps {
  buttonText?: string;
  children?: React.ReactNode;
  primary?: SingleChoiceArg<"solid" | "outline" | "ghost">;
  secondary?: SingleChoiceArg<"solid" | "outline">;
  leftIcon?: SingleBooleanChoiceArg<"leftIcon">;
  rightIcon?: SingleBooleanChoiceArg<"rightIcon">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButton__RenderFunc(props: {
  variants: PlasmicButton__VariantsArgs;
  args: PlasmicButton__ArgsType;
  overrides: PlasmicButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          buttonText: "\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "primary",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.primary
      },
      {
        path: "secondary",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.secondary
      },
      {
        path: "leftIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.leftIcon
      },
      {
        path: "rightIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rightIcon
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootleftIcon]: hasVariant($state, "leftIcon", "leftIcon"),
          [sty.rootleftIcon_primary_outline]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "primary", "outline"),
          [sty.rootleftIcon_primary_solid]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "primary", "solid"),
          [sty.rootleftIcon_rightIcon_secondary_outline]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "secondary", "outline"),
          [sty.rootleftIcon_secondary_outline]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "secondary", "outline"),
          [sty.rootleftIcon_secondary_solid]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "secondary", "solid"),
          [sty.rootprimary_ghost]: hasVariant($state, "primary", "ghost"),
          [sty.rootprimary_outline]: hasVariant($state, "primary", "outline"),
          [sty.rootprimary_outline_secondary_outline]:
            hasVariant($state, "primary", "outline") &&
            hasVariant($state, "secondary", "outline"),
          [sty.rootprimary_solid]: hasVariant($state, "primary", "solid"),
          [sty.rootrightIcon]: hasVariant($state, "rightIcon", "rightIcon"),
          [sty.rootrightIcon_primary_outline]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "primary", "outline"),
          [sty.rootrightIcon_primary_solid]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "primary", "solid"),
          [sty.rootrightIcon_secondary_outline]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "secondary", "outline"),
          [sty.rootrightIcon_secondary_solid]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "secondary", "solid"),
          [sty.rootsecondary_outline]: hasVariant(
            $state,
            "secondary",
            "outline"
          ),
          [sty.rootsecondary_outline_primary_solid]:
            hasVariant($state, "primary", "solid") &&
            hasVariant($state, "secondary", "outline"),
          [sty.rootsecondary_solid]: hasVariant($state, "secondary", "solid")
        }
      )}
    >
      <Home2SvgIcon
        className={classNames(projectcss.all, sty.svg__kBiAs, {
          [sty.svgleftIcon__kBiAs4YbTk]: hasVariant(
            $state,
            "leftIcon",
            "leftIcon"
          ),
          [sty.svgleftIcon_primary_outline__kBiAs4YbTkZdiCe]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "primary", "outline"),
          [sty.svgleftIcon_primary_solid__kBiAs4YbTkKguR2]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "primary", "solid"),
          [sty.svgleftIcon_secondary_solid__kBiAs4YbTkLSvVp]:
            hasVariant($state, "leftIcon", "leftIcon") &&
            hasVariant($state, "secondary", "solid")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxprimary_ghost]: hasVariant($state, "primary", "ghost"),
          [sty.freeBoxprimary_outline]: hasVariant(
            $state,
            "primary",
            "outline"
          ),
          [sty.freeBoxprimary_outline_secondary_outline]:
            hasVariant($state, "primary", "outline") &&
            hasVariant($state, "secondary", "outline"),
          [sty.freeBoxprimary_solid]: hasVariant($state, "primary", "solid"),
          [sty.freeBoxrightIcon]: hasVariant($state, "rightIcon", "rightIcon"),
          [sty.freeBoxsecondary_outline]: hasVariant(
            $state,
            "secondary",
            "outline"
          ),
          [sty.freeBoxsecondary_solid]: hasVariant($state, "secondary", "solid")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: "\u0e02\u0e49\u0e2d\u0e04\u0e27\u0e32\u0e21",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenleftIcon_secondary_outline]:
              hasVariant($state, "leftIcon", "leftIcon") &&
              hasVariant($state, "secondary", "outline"),
            [sty.slotTargetChildrenprimary_ghost]: hasVariant(
              $state,
              "primary",
              "ghost"
            ),
            [sty.slotTargetChildrenprimary_outline]: hasVariant(
              $state,
              "primary",
              "outline"
            ),
            [sty.slotTargetChildrenprimary_outline_secondary_outline]:
              hasVariant($state, "primary", "outline") &&
              hasVariant($state, "secondary", "outline"),
            [sty.slotTargetChildrenprimary_solid]: hasVariant(
              $state,
              "primary",
              "solid"
            ),
            [sty.slotTargetChildrenrightIcon]: hasVariant(
              $state,
              "rightIcon",
              "rightIcon"
            ),
            [sty.slotTargetChildrenrightIcon_secondary_outline]:
              hasVariant($state, "rightIcon", "rightIcon") &&
              hasVariant($state, "secondary", "outline"),
            [sty.slotTargetChildrensecondary_outline]: hasVariant(
              $state,
              "secondary",
              "outline"
            ),
            [sty.slotTargetChildrensecondary_solid]: hasVariant(
              $state,
              "secondary",
              "solid"
            )
          })
        })}
      </div>
      <AngleDownSvgIcon
        className={classNames(projectcss.all, sty.svg___8HRvH, {
          [sty.svgprimary_ghost___8HRvHt1SrJ]: hasVariant(
            $state,
            "primary",
            "ghost"
          ),
          [sty.svgrightIcon___8HRvHh2Dyq]: hasVariant(
            $state,
            "rightIcon",
            "rightIcon"
          ),
          [sty.svgrightIcon_primary_outline___8HRvHh2DyqZdiCe]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "primary", "outline"),
          [sty.svgrightIcon_primary_solid___8HRvHh2DyqKguR2]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "primary", "solid"),
          [sty.svgrightIcon_secondary_solid___8HRvHh2DyqLSvVp]:
            hasVariant($state, "rightIcon", "rightIcon") &&
            hasVariant($state, "secondary", "solid")
        })}
        role={"img"}
      />
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButton__VariantsArgs;
    args?: PlasmicButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButton__ArgProps,
          internalVariantPropNames: PlasmicButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
